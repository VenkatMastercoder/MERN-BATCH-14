
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model StudentProof
 * 
 */
export type StudentProof = $Result.DefaultSelection<Prisma.$StudentProofPayload>
/**
 * Model StudentFees
 * 
 */
export type StudentFees = $Result.DefaultSelection<Prisma.$StudentFeesPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const ProofType: {
  AADHARCARD: 'AADHARCARD',
  PANCARD: 'PANCARD'
};

export type ProofType = (typeof ProofType)[keyof typeof ProofType]


export const PaymentType: {
  CASH: 'CASH',
  NEFT: 'NEFT',
  BANKTRANFER: 'BANKTRANFER'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]

}

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type ProofType = $Enums.ProofType

export const ProofType: typeof $Enums.ProofType

export type PaymentType = $Enums.PaymentType

export const PaymentType: typeof $Enums.PaymentType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Students
 * const students = await prisma.student.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Students
   * const students = await prisma.student.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentProof`: Exposes CRUD operations for the **StudentProof** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentProofs
    * const studentProofs = await prisma.studentProof.findMany()
    * ```
    */
  get studentProof(): Prisma.StudentProofDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentFees`: Exposes CRUD operations for the **StudentFees** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentFees
    * const studentFees = await prisma.studentFees.findMany()
    * ```
    */
  get studentFees(): Prisma.StudentFeesDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Student: 'Student',
    StudentProof: 'StudentProof',
    StudentFees: 'StudentFees'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "student" | "studentProof" | "studentFees"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      StudentProof: {
        payload: Prisma.$StudentProofPayload<ExtArgs>
        fields: Prisma.StudentProofFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentProofFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProofPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentProofFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProofPayload>
          }
          findFirst: {
            args: Prisma.StudentProofFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProofPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentProofFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProofPayload>
          }
          findMany: {
            args: Prisma.StudentProofFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProofPayload>[]
          }
          create: {
            args: Prisma.StudentProofCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProofPayload>
          }
          createMany: {
            args: Prisma.StudentProofCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentProofCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProofPayload>[]
          }
          delete: {
            args: Prisma.StudentProofDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProofPayload>
          }
          update: {
            args: Prisma.StudentProofUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProofPayload>
          }
          deleteMany: {
            args: Prisma.StudentProofDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentProofUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentProofUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProofPayload>[]
          }
          upsert: {
            args: Prisma.StudentProofUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProofPayload>
          }
          aggregate: {
            args: Prisma.StudentProofAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentProof>
          }
          groupBy: {
            args: Prisma.StudentProofGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentProofGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentProofCountArgs<ExtArgs>
            result: $Utils.Optional<StudentProofCountAggregateOutputType> | number
          }
        }
      }
      StudentFees: {
        payload: Prisma.$StudentFeesPayload<ExtArgs>
        fields: Prisma.StudentFeesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFeesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFeesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>
          }
          findFirst: {
            args: Prisma.StudentFeesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFeesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>
          }
          findMany: {
            args: Prisma.StudentFeesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>[]
          }
          create: {
            args: Prisma.StudentFeesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>
          }
          createMany: {
            args: Prisma.StudentFeesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentFeesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>[]
          }
          delete: {
            args: Prisma.StudentFeesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>
          }
          update: {
            args: Prisma.StudentFeesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>
          }
          deleteMany: {
            args: Prisma.StudentFeesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentFeesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentFeesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>[]
          }
          upsert: {
            args: Prisma.StudentFeesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentFeesPayload>
          }
          aggregate: {
            args: Prisma.StudentFeesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentFees>
          }
          groupBy: {
            args: Prisma.StudentFeesGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentFeesGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentFeesCountArgs<ExtArgs>
            result: $Utils.Optional<StudentFeesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    student?: StudentOmit
    studentProof?: StudentProofOmit
    studentFees?: StudentFeesOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    studentFees: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentFees?: boolean | StudentCountOutputTypeCountStudentFeesArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountStudentFeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentFeesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentMinAggregateOutputType = {
    roll_no: string | null
    name: string | null
    gender: $Enums.Gender | null
    dob: string | null
    blood_group: string | null
  }

  export type StudentMaxAggregateOutputType = {
    roll_no: string | null
    name: string | null
    gender: $Enums.Gender | null
    dob: string | null
    blood_group: string | null
  }

  export type StudentCountAggregateOutputType = {
    roll_no: number
    name: number
    gender: number
    dob: number
    blood_group: number
    _all: number
  }


  export type StudentMinAggregateInputType = {
    roll_no?: true
    name?: true
    gender?: true
    dob?: true
    blood_group?: true
  }

  export type StudentMaxAggregateInputType = {
    roll_no?: true
    name?: true
    gender?: true
    dob?: true
    blood_group?: true
  }

  export type StudentCountAggregateInputType = {
    roll_no?: true
    name?: true
    gender?: true
    dob?: true
    blood_group?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    roll_no: string
    name: string
    gender: $Enums.Gender
    dob: string
    blood_group: string
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roll_no?: boolean
    name?: boolean
    gender?: boolean
    dob?: boolean
    blood_group?: boolean
    studentProof?: boolean | Student$studentProofArgs<ExtArgs>
    studentFees?: boolean | Student$studentFeesArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roll_no?: boolean
    name?: boolean
    gender?: boolean
    dob?: boolean
    blood_group?: boolean
  }, ExtArgs["result"]["student"]>

  export type StudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roll_no?: boolean
    name?: boolean
    gender?: boolean
    dob?: boolean
    blood_group?: boolean
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    roll_no?: boolean
    name?: boolean
    gender?: boolean
    dob?: boolean
    blood_group?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"roll_no" | "name" | "gender" | "dob" | "blood_group", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentProof?: boolean | Student$studentProofArgs<ExtArgs>
    studentFees?: boolean | Student$studentFeesArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      studentProof: Prisma.$StudentProofPayload<ExtArgs> | null
      studentFees: Prisma.$StudentFeesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      roll_no: string
      name: string
      gender: $Enums.Gender
      dob: string
      blood_group: string
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `roll_no`
     * const studentWithRoll_noOnly = await prisma.student.findMany({ select: { roll_no: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `roll_no`
     * const studentWithRoll_noOnly = await prisma.student.createManyAndReturn({
     *   select: { roll_no: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {StudentUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `roll_no`
     * const studentWithRoll_noOnly = await prisma.student.updateManyAndReturn({
     *   select: { roll_no: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    studentProof<T extends Student$studentProofArgs<ExtArgs> = {}>(args?: Subset<T, Student$studentProofArgs<ExtArgs>>): Prisma__StudentProofClient<$Result.GetResult<Prisma.$StudentProofPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    studentFees<T extends Student$studentFeesArgs<ExtArgs> = {}>(args?: Subset<T, Student$studentFeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly roll_no: FieldRef<"Student", 'String'>
    readonly name: FieldRef<"Student", 'String'>
    readonly gender: FieldRef<"Student", 'Gender'>
    readonly dob: FieldRef<"Student", 'String'>
    readonly blood_group: FieldRef<"Student", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student updateManyAndReturn
   */
  export type StudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.studentProof
   */
  export type Student$studentProofArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProof
     */
    select?: StudentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProof
     */
    omit?: StudentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProofInclude<ExtArgs> | null
    where?: StudentProofWhereInput
  }

  /**
   * Student.studentFees
   */
  export type Student$studentFeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    where?: StudentFeesWhereInput
    orderBy?: StudentFeesOrderByWithRelationInput | StudentFeesOrderByWithRelationInput[]
    cursor?: StudentFeesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentFeesScalarFieldEnum | StudentFeesScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model StudentProof
   */

  export type AggregateStudentProof = {
    _count: StudentProofCountAggregateOutputType | null
    _min: StudentProofMinAggregateOutputType | null
    _max: StudentProofMaxAggregateOutputType | null
  }

  export type StudentProofMinAggregateOutputType = {
    student_proof_id: string | null
    proof_type: $Enums.ProofType | null
    proof_link: string | null
    roll_no: string | null
  }

  export type StudentProofMaxAggregateOutputType = {
    student_proof_id: string | null
    proof_type: $Enums.ProofType | null
    proof_link: string | null
    roll_no: string | null
  }

  export type StudentProofCountAggregateOutputType = {
    student_proof_id: number
    proof_type: number
    proof_link: number
    roll_no: number
    _all: number
  }


  export type StudentProofMinAggregateInputType = {
    student_proof_id?: true
    proof_type?: true
    proof_link?: true
    roll_no?: true
  }

  export type StudentProofMaxAggregateInputType = {
    student_proof_id?: true
    proof_type?: true
    proof_link?: true
    roll_no?: true
  }

  export type StudentProofCountAggregateInputType = {
    student_proof_id?: true
    proof_type?: true
    proof_link?: true
    roll_no?: true
    _all?: true
  }

  export type StudentProofAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentProof to aggregate.
     */
    where?: StudentProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentProofs to fetch.
     */
    orderBy?: StudentProofOrderByWithRelationInput | StudentProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentProofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentProofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentProofs
    **/
    _count?: true | StudentProofCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentProofMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentProofMaxAggregateInputType
  }

  export type GetStudentProofAggregateType<T extends StudentProofAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentProof]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentProof[P]>
      : GetScalarType<T[P], AggregateStudentProof[P]>
  }




  export type StudentProofGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentProofWhereInput
    orderBy?: StudentProofOrderByWithAggregationInput | StudentProofOrderByWithAggregationInput[]
    by: StudentProofScalarFieldEnum[] | StudentProofScalarFieldEnum
    having?: StudentProofScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentProofCountAggregateInputType | true
    _min?: StudentProofMinAggregateInputType
    _max?: StudentProofMaxAggregateInputType
  }

  export type StudentProofGroupByOutputType = {
    student_proof_id: string
    proof_type: $Enums.ProofType
    proof_link: string
    roll_no: string
    _count: StudentProofCountAggregateOutputType | null
    _min: StudentProofMinAggregateOutputType | null
    _max: StudentProofMaxAggregateOutputType | null
  }

  type GetStudentProofGroupByPayload<T extends StudentProofGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentProofGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentProofGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentProofGroupByOutputType[P]>
            : GetScalarType<T[P], StudentProofGroupByOutputType[P]>
        }
      >
    >


  export type StudentProofSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    student_proof_id?: boolean
    proof_type?: boolean
    proof_link?: boolean
    roll_no?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentProof"]>

  export type StudentProofSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    student_proof_id?: boolean
    proof_type?: boolean
    proof_link?: boolean
    roll_no?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentProof"]>

  export type StudentProofSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    student_proof_id?: boolean
    proof_type?: boolean
    proof_link?: boolean
    roll_no?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentProof"]>

  export type StudentProofSelectScalar = {
    student_proof_id?: boolean
    proof_type?: boolean
    proof_link?: boolean
    roll_no?: boolean
  }

  export type StudentProofOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"student_proof_id" | "proof_type" | "proof_link" | "roll_no", ExtArgs["result"]["studentProof"]>
  export type StudentProofInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type StudentProofIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type StudentProofIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $StudentProofPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentProof"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      student_proof_id: string
      proof_type: $Enums.ProofType
      proof_link: string
      roll_no: string
    }, ExtArgs["result"]["studentProof"]>
    composites: {}
  }

  type StudentProofGetPayload<S extends boolean | null | undefined | StudentProofDefaultArgs> = $Result.GetResult<Prisma.$StudentProofPayload, S>

  type StudentProofCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentProofFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentProofCountAggregateInputType | true
    }

  export interface StudentProofDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentProof'], meta: { name: 'StudentProof' } }
    /**
     * Find zero or one StudentProof that matches the filter.
     * @param {StudentProofFindUniqueArgs} args - Arguments to find a StudentProof
     * @example
     * // Get one StudentProof
     * const studentProof = await prisma.studentProof.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentProofFindUniqueArgs>(args: SelectSubset<T, StudentProofFindUniqueArgs<ExtArgs>>): Prisma__StudentProofClient<$Result.GetResult<Prisma.$StudentProofPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentProof that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentProofFindUniqueOrThrowArgs} args - Arguments to find a StudentProof
     * @example
     * // Get one StudentProof
     * const studentProof = await prisma.studentProof.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentProofFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentProofFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentProofClient<$Result.GetResult<Prisma.$StudentProofPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentProof that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProofFindFirstArgs} args - Arguments to find a StudentProof
     * @example
     * // Get one StudentProof
     * const studentProof = await prisma.studentProof.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentProofFindFirstArgs>(args?: SelectSubset<T, StudentProofFindFirstArgs<ExtArgs>>): Prisma__StudentProofClient<$Result.GetResult<Prisma.$StudentProofPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentProof that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProofFindFirstOrThrowArgs} args - Arguments to find a StudentProof
     * @example
     * // Get one StudentProof
     * const studentProof = await prisma.studentProof.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentProofFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentProofFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentProofClient<$Result.GetResult<Prisma.$StudentProofPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentProofs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProofFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentProofs
     * const studentProofs = await prisma.studentProof.findMany()
     * 
     * // Get first 10 StudentProofs
     * const studentProofs = await prisma.studentProof.findMany({ take: 10 })
     * 
     * // Only select the `student_proof_id`
     * const studentProofWithStudent_proof_idOnly = await prisma.studentProof.findMany({ select: { student_proof_id: true } })
     * 
     */
    findMany<T extends StudentProofFindManyArgs>(args?: SelectSubset<T, StudentProofFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentProofPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentProof.
     * @param {StudentProofCreateArgs} args - Arguments to create a StudentProof.
     * @example
     * // Create one StudentProof
     * const StudentProof = await prisma.studentProof.create({
     *   data: {
     *     // ... data to create a StudentProof
     *   }
     * })
     * 
     */
    create<T extends StudentProofCreateArgs>(args: SelectSubset<T, StudentProofCreateArgs<ExtArgs>>): Prisma__StudentProofClient<$Result.GetResult<Prisma.$StudentProofPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentProofs.
     * @param {StudentProofCreateManyArgs} args - Arguments to create many StudentProofs.
     * @example
     * // Create many StudentProofs
     * const studentProof = await prisma.studentProof.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentProofCreateManyArgs>(args?: SelectSubset<T, StudentProofCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentProofs and returns the data saved in the database.
     * @param {StudentProofCreateManyAndReturnArgs} args - Arguments to create many StudentProofs.
     * @example
     * // Create many StudentProofs
     * const studentProof = await prisma.studentProof.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentProofs and only return the `student_proof_id`
     * const studentProofWithStudent_proof_idOnly = await prisma.studentProof.createManyAndReturn({
     *   select: { student_proof_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentProofCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentProofCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentProofPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentProof.
     * @param {StudentProofDeleteArgs} args - Arguments to delete one StudentProof.
     * @example
     * // Delete one StudentProof
     * const StudentProof = await prisma.studentProof.delete({
     *   where: {
     *     // ... filter to delete one StudentProof
     *   }
     * })
     * 
     */
    delete<T extends StudentProofDeleteArgs>(args: SelectSubset<T, StudentProofDeleteArgs<ExtArgs>>): Prisma__StudentProofClient<$Result.GetResult<Prisma.$StudentProofPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentProof.
     * @param {StudentProofUpdateArgs} args - Arguments to update one StudentProof.
     * @example
     * // Update one StudentProof
     * const studentProof = await prisma.studentProof.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentProofUpdateArgs>(args: SelectSubset<T, StudentProofUpdateArgs<ExtArgs>>): Prisma__StudentProofClient<$Result.GetResult<Prisma.$StudentProofPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentProofs.
     * @param {StudentProofDeleteManyArgs} args - Arguments to filter StudentProofs to delete.
     * @example
     * // Delete a few StudentProofs
     * const { count } = await prisma.studentProof.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentProofDeleteManyArgs>(args?: SelectSubset<T, StudentProofDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentProofs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProofUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentProofs
     * const studentProof = await prisma.studentProof.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentProofUpdateManyArgs>(args: SelectSubset<T, StudentProofUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentProofs and returns the data updated in the database.
     * @param {StudentProofUpdateManyAndReturnArgs} args - Arguments to update many StudentProofs.
     * @example
     * // Update many StudentProofs
     * const studentProof = await prisma.studentProof.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentProofs and only return the `student_proof_id`
     * const studentProofWithStudent_proof_idOnly = await prisma.studentProof.updateManyAndReturn({
     *   select: { student_proof_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentProofUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentProofUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentProofPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentProof.
     * @param {StudentProofUpsertArgs} args - Arguments to update or create a StudentProof.
     * @example
     * // Update or create a StudentProof
     * const studentProof = await prisma.studentProof.upsert({
     *   create: {
     *     // ... data to create a StudentProof
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentProof we want to update
     *   }
     * })
     */
    upsert<T extends StudentProofUpsertArgs>(args: SelectSubset<T, StudentProofUpsertArgs<ExtArgs>>): Prisma__StudentProofClient<$Result.GetResult<Prisma.$StudentProofPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentProofs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProofCountArgs} args - Arguments to filter StudentProofs to count.
     * @example
     * // Count the number of StudentProofs
     * const count = await prisma.studentProof.count({
     *   where: {
     *     // ... the filter for the StudentProofs we want to count
     *   }
     * })
    **/
    count<T extends StudentProofCountArgs>(
      args?: Subset<T, StudentProofCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentProofCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentProof.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProofAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentProofAggregateArgs>(args: Subset<T, StudentProofAggregateArgs>): Prisma.PrismaPromise<GetStudentProofAggregateType<T>>

    /**
     * Group by StudentProof.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProofGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentProofGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentProofGroupByArgs['orderBy'] }
        : { orderBy?: StudentProofGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentProofGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentProofGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentProof model
   */
  readonly fields: StudentProofFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentProof.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentProofClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentProof model
   */
  interface StudentProofFieldRefs {
    readonly student_proof_id: FieldRef<"StudentProof", 'String'>
    readonly proof_type: FieldRef<"StudentProof", 'ProofType'>
    readonly proof_link: FieldRef<"StudentProof", 'String'>
    readonly roll_no: FieldRef<"StudentProof", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StudentProof findUnique
   */
  export type StudentProofFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProof
     */
    select?: StudentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProof
     */
    omit?: StudentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProofInclude<ExtArgs> | null
    /**
     * Filter, which StudentProof to fetch.
     */
    where: StudentProofWhereUniqueInput
  }

  /**
   * StudentProof findUniqueOrThrow
   */
  export type StudentProofFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProof
     */
    select?: StudentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProof
     */
    omit?: StudentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProofInclude<ExtArgs> | null
    /**
     * Filter, which StudentProof to fetch.
     */
    where: StudentProofWhereUniqueInput
  }

  /**
   * StudentProof findFirst
   */
  export type StudentProofFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProof
     */
    select?: StudentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProof
     */
    omit?: StudentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProofInclude<ExtArgs> | null
    /**
     * Filter, which StudentProof to fetch.
     */
    where?: StudentProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentProofs to fetch.
     */
    orderBy?: StudentProofOrderByWithRelationInput | StudentProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentProofs.
     */
    cursor?: StudentProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentProofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentProofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentProofs.
     */
    distinct?: StudentProofScalarFieldEnum | StudentProofScalarFieldEnum[]
  }

  /**
   * StudentProof findFirstOrThrow
   */
  export type StudentProofFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProof
     */
    select?: StudentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProof
     */
    omit?: StudentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProofInclude<ExtArgs> | null
    /**
     * Filter, which StudentProof to fetch.
     */
    where?: StudentProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentProofs to fetch.
     */
    orderBy?: StudentProofOrderByWithRelationInput | StudentProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentProofs.
     */
    cursor?: StudentProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentProofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentProofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentProofs.
     */
    distinct?: StudentProofScalarFieldEnum | StudentProofScalarFieldEnum[]
  }

  /**
   * StudentProof findMany
   */
  export type StudentProofFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProof
     */
    select?: StudentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProof
     */
    omit?: StudentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProofInclude<ExtArgs> | null
    /**
     * Filter, which StudentProofs to fetch.
     */
    where?: StudentProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentProofs to fetch.
     */
    orderBy?: StudentProofOrderByWithRelationInput | StudentProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentProofs.
     */
    cursor?: StudentProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentProofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentProofs.
     */
    skip?: number
    distinct?: StudentProofScalarFieldEnum | StudentProofScalarFieldEnum[]
  }

  /**
   * StudentProof create
   */
  export type StudentProofCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProof
     */
    select?: StudentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProof
     */
    omit?: StudentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProofInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentProof.
     */
    data: XOR<StudentProofCreateInput, StudentProofUncheckedCreateInput>
  }

  /**
   * StudentProof createMany
   */
  export type StudentProofCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentProofs.
     */
    data: StudentProofCreateManyInput | StudentProofCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentProof createManyAndReturn
   */
  export type StudentProofCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProof
     */
    select?: StudentProofSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProof
     */
    omit?: StudentProofOmit<ExtArgs> | null
    /**
     * The data used to create many StudentProofs.
     */
    data: StudentProofCreateManyInput | StudentProofCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProofIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentProof update
   */
  export type StudentProofUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProof
     */
    select?: StudentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProof
     */
    omit?: StudentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProofInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentProof.
     */
    data: XOR<StudentProofUpdateInput, StudentProofUncheckedUpdateInput>
    /**
     * Choose, which StudentProof to update.
     */
    where: StudentProofWhereUniqueInput
  }

  /**
   * StudentProof updateMany
   */
  export type StudentProofUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentProofs.
     */
    data: XOR<StudentProofUpdateManyMutationInput, StudentProofUncheckedUpdateManyInput>
    /**
     * Filter which StudentProofs to update
     */
    where?: StudentProofWhereInput
    /**
     * Limit how many StudentProofs to update.
     */
    limit?: number
  }

  /**
   * StudentProof updateManyAndReturn
   */
  export type StudentProofUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProof
     */
    select?: StudentProofSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProof
     */
    omit?: StudentProofOmit<ExtArgs> | null
    /**
     * The data used to update StudentProofs.
     */
    data: XOR<StudentProofUpdateManyMutationInput, StudentProofUncheckedUpdateManyInput>
    /**
     * Filter which StudentProofs to update
     */
    where?: StudentProofWhereInput
    /**
     * Limit how many StudentProofs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProofIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentProof upsert
   */
  export type StudentProofUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProof
     */
    select?: StudentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProof
     */
    omit?: StudentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProofInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentProof to update in case it exists.
     */
    where: StudentProofWhereUniqueInput
    /**
     * In case the StudentProof found by the `where` argument doesn't exist, create a new StudentProof with this data.
     */
    create: XOR<StudentProofCreateInput, StudentProofUncheckedCreateInput>
    /**
     * In case the StudentProof was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentProofUpdateInput, StudentProofUncheckedUpdateInput>
  }

  /**
   * StudentProof delete
   */
  export type StudentProofDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProof
     */
    select?: StudentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProof
     */
    omit?: StudentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProofInclude<ExtArgs> | null
    /**
     * Filter which StudentProof to delete.
     */
    where: StudentProofWhereUniqueInput
  }

  /**
   * StudentProof deleteMany
   */
  export type StudentProofDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentProofs to delete
     */
    where?: StudentProofWhereInput
    /**
     * Limit how many StudentProofs to delete.
     */
    limit?: number
  }

  /**
   * StudentProof without action
   */
  export type StudentProofDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProof
     */
    select?: StudentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProof
     */
    omit?: StudentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProofInclude<ExtArgs> | null
  }


  /**
   * Model StudentFees
   */

  export type AggregateStudentFees = {
    _count: StudentFeesCountAggregateOutputType | null
    _min: StudentFeesMinAggregateOutputType | null
    _max: StudentFeesMaxAggregateOutputType | null
  }

  export type StudentFeesMinAggregateOutputType = {
    student_fees_id: string | null
    payment_id: string | null
    payment_mode: $Enums.PaymentType | null
    payment_amount: string | null
    roll_no: string | null
  }

  export type StudentFeesMaxAggregateOutputType = {
    student_fees_id: string | null
    payment_id: string | null
    payment_mode: $Enums.PaymentType | null
    payment_amount: string | null
    roll_no: string | null
  }

  export type StudentFeesCountAggregateOutputType = {
    student_fees_id: number
    payment_id: number
    payment_mode: number
    payment_amount: number
    roll_no: number
    _all: number
  }


  export type StudentFeesMinAggregateInputType = {
    student_fees_id?: true
    payment_id?: true
    payment_mode?: true
    payment_amount?: true
    roll_no?: true
  }

  export type StudentFeesMaxAggregateInputType = {
    student_fees_id?: true
    payment_id?: true
    payment_mode?: true
    payment_amount?: true
    roll_no?: true
  }

  export type StudentFeesCountAggregateInputType = {
    student_fees_id?: true
    payment_id?: true
    payment_mode?: true
    payment_amount?: true
    roll_no?: true
    _all?: true
  }

  export type StudentFeesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentFees to aggregate.
     */
    where?: StudentFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentFees to fetch.
     */
    orderBy?: StudentFeesOrderByWithRelationInput | StudentFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentFees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentFees
    **/
    _count?: true | StudentFeesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentFeesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentFeesMaxAggregateInputType
  }

  export type GetStudentFeesAggregateType<T extends StudentFeesAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentFees]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentFees[P]>
      : GetScalarType<T[P], AggregateStudentFees[P]>
  }




  export type StudentFeesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentFeesWhereInput
    orderBy?: StudentFeesOrderByWithAggregationInput | StudentFeesOrderByWithAggregationInput[]
    by: StudentFeesScalarFieldEnum[] | StudentFeesScalarFieldEnum
    having?: StudentFeesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentFeesCountAggregateInputType | true
    _min?: StudentFeesMinAggregateInputType
    _max?: StudentFeesMaxAggregateInputType
  }

  export type StudentFeesGroupByOutputType = {
    student_fees_id: string
    payment_id: string
    payment_mode: $Enums.PaymentType
    payment_amount: string
    roll_no: string
    _count: StudentFeesCountAggregateOutputType | null
    _min: StudentFeesMinAggregateOutputType | null
    _max: StudentFeesMaxAggregateOutputType | null
  }

  type GetStudentFeesGroupByPayload<T extends StudentFeesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentFeesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentFeesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentFeesGroupByOutputType[P]>
            : GetScalarType<T[P], StudentFeesGroupByOutputType[P]>
        }
      >
    >


  export type StudentFeesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    student_fees_id?: boolean
    payment_id?: boolean
    payment_mode?: boolean
    payment_amount?: boolean
    roll_no?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentFees"]>

  export type StudentFeesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    student_fees_id?: boolean
    payment_id?: boolean
    payment_mode?: boolean
    payment_amount?: boolean
    roll_no?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentFees"]>

  export type StudentFeesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    student_fees_id?: boolean
    payment_id?: boolean
    payment_mode?: boolean
    payment_amount?: boolean
    roll_no?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentFees"]>

  export type StudentFeesSelectScalar = {
    student_fees_id?: boolean
    payment_id?: boolean
    payment_mode?: boolean
    payment_amount?: boolean
    roll_no?: boolean
  }

  export type StudentFeesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"student_fees_id" | "payment_id" | "payment_mode" | "payment_amount" | "roll_no", ExtArgs["result"]["studentFees"]>
  export type StudentFeesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type StudentFeesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type StudentFeesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $StudentFeesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentFees"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      student_fees_id: string
      payment_id: string
      payment_mode: $Enums.PaymentType
      payment_amount: string
      roll_no: string
    }, ExtArgs["result"]["studentFees"]>
    composites: {}
  }

  type StudentFeesGetPayload<S extends boolean | null | undefined | StudentFeesDefaultArgs> = $Result.GetResult<Prisma.$StudentFeesPayload, S>

  type StudentFeesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFeesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentFeesCountAggregateInputType | true
    }

  export interface StudentFeesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentFees'], meta: { name: 'StudentFees' } }
    /**
     * Find zero or one StudentFees that matches the filter.
     * @param {StudentFeesFindUniqueArgs} args - Arguments to find a StudentFees
     * @example
     * // Get one StudentFees
     * const studentFees = await prisma.studentFees.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFeesFindUniqueArgs>(args: SelectSubset<T, StudentFeesFindUniqueArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentFees that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFeesFindUniqueOrThrowArgs} args - Arguments to find a StudentFees
     * @example
     * // Get one StudentFees
     * const studentFees = await prisma.studentFees.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFeesFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFeesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentFees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesFindFirstArgs} args - Arguments to find a StudentFees
     * @example
     * // Get one StudentFees
     * const studentFees = await prisma.studentFees.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFeesFindFirstArgs>(args?: SelectSubset<T, StudentFeesFindFirstArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentFees that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesFindFirstOrThrowArgs} args - Arguments to find a StudentFees
     * @example
     * // Get one StudentFees
     * const studentFees = await prisma.studentFees.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFeesFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFeesFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentFees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentFees
     * const studentFees = await prisma.studentFees.findMany()
     * 
     * // Get first 10 StudentFees
     * const studentFees = await prisma.studentFees.findMany({ take: 10 })
     * 
     * // Only select the `student_fees_id`
     * const studentFeesWithStudent_fees_idOnly = await prisma.studentFees.findMany({ select: { student_fees_id: true } })
     * 
     */
    findMany<T extends StudentFeesFindManyArgs>(args?: SelectSubset<T, StudentFeesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentFees.
     * @param {StudentFeesCreateArgs} args - Arguments to create a StudentFees.
     * @example
     * // Create one StudentFees
     * const StudentFees = await prisma.studentFees.create({
     *   data: {
     *     // ... data to create a StudentFees
     *   }
     * })
     * 
     */
    create<T extends StudentFeesCreateArgs>(args: SelectSubset<T, StudentFeesCreateArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentFees.
     * @param {StudentFeesCreateManyArgs} args - Arguments to create many StudentFees.
     * @example
     * // Create many StudentFees
     * const studentFees = await prisma.studentFees.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentFeesCreateManyArgs>(args?: SelectSubset<T, StudentFeesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentFees and returns the data saved in the database.
     * @param {StudentFeesCreateManyAndReturnArgs} args - Arguments to create many StudentFees.
     * @example
     * // Create many StudentFees
     * const studentFees = await prisma.studentFees.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentFees and only return the `student_fees_id`
     * const studentFeesWithStudent_fees_idOnly = await prisma.studentFees.createManyAndReturn({
     *   select: { student_fees_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentFeesCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentFeesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentFees.
     * @param {StudentFeesDeleteArgs} args - Arguments to delete one StudentFees.
     * @example
     * // Delete one StudentFees
     * const StudentFees = await prisma.studentFees.delete({
     *   where: {
     *     // ... filter to delete one StudentFees
     *   }
     * })
     * 
     */
    delete<T extends StudentFeesDeleteArgs>(args: SelectSubset<T, StudentFeesDeleteArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentFees.
     * @param {StudentFeesUpdateArgs} args - Arguments to update one StudentFees.
     * @example
     * // Update one StudentFees
     * const studentFees = await prisma.studentFees.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentFeesUpdateArgs>(args: SelectSubset<T, StudentFeesUpdateArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentFees.
     * @param {StudentFeesDeleteManyArgs} args - Arguments to filter StudentFees to delete.
     * @example
     * // Delete a few StudentFees
     * const { count } = await prisma.studentFees.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentFeesDeleteManyArgs>(args?: SelectSubset<T, StudentFeesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentFees
     * const studentFees = await prisma.studentFees.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentFeesUpdateManyArgs>(args: SelectSubset<T, StudentFeesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentFees and returns the data updated in the database.
     * @param {StudentFeesUpdateManyAndReturnArgs} args - Arguments to update many StudentFees.
     * @example
     * // Update many StudentFees
     * const studentFees = await prisma.studentFees.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentFees and only return the `student_fees_id`
     * const studentFeesWithStudent_fees_idOnly = await prisma.studentFees.updateManyAndReturn({
     *   select: { student_fees_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentFeesUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentFeesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentFees.
     * @param {StudentFeesUpsertArgs} args - Arguments to update or create a StudentFees.
     * @example
     * // Update or create a StudentFees
     * const studentFees = await prisma.studentFees.upsert({
     *   create: {
     *     // ... data to create a StudentFees
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentFees we want to update
     *   }
     * })
     */
    upsert<T extends StudentFeesUpsertArgs>(args: SelectSubset<T, StudentFeesUpsertArgs<ExtArgs>>): Prisma__StudentFeesClient<$Result.GetResult<Prisma.$StudentFeesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesCountArgs} args - Arguments to filter StudentFees to count.
     * @example
     * // Count the number of StudentFees
     * const count = await prisma.studentFees.count({
     *   where: {
     *     // ... the filter for the StudentFees we want to count
     *   }
     * })
    **/
    count<T extends StudentFeesCountArgs>(
      args?: Subset<T, StudentFeesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentFeesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentFeesAggregateArgs>(args: Subset<T, StudentFeesAggregateArgs>): Prisma.PrismaPromise<GetStudentFeesAggregateType<T>>

    /**
     * Group by StudentFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFeesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentFeesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentFeesGroupByArgs['orderBy'] }
        : { orderBy?: StudentFeesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentFeesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentFeesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentFees model
   */
  readonly fields: StudentFeesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentFees.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentFeesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentFees model
   */
  interface StudentFeesFieldRefs {
    readonly student_fees_id: FieldRef<"StudentFees", 'String'>
    readonly payment_id: FieldRef<"StudentFees", 'String'>
    readonly payment_mode: FieldRef<"StudentFees", 'PaymentType'>
    readonly payment_amount: FieldRef<"StudentFees", 'String'>
    readonly roll_no: FieldRef<"StudentFees", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StudentFees findUnique
   */
  export type StudentFeesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentFees to fetch.
     */
    where: StudentFeesWhereUniqueInput
  }

  /**
   * StudentFees findUniqueOrThrow
   */
  export type StudentFeesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentFees to fetch.
     */
    where: StudentFeesWhereUniqueInput
  }

  /**
   * StudentFees findFirst
   */
  export type StudentFeesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentFees to fetch.
     */
    where?: StudentFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentFees to fetch.
     */
    orderBy?: StudentFeesOrderByWithRelationInput | StudentFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentFees.
     */
    cursor?: StudentFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentFees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentFees.
     */
    distinct?: StudentFeesScalarFieldEnum | StudentFeesScalarFieldEnum[]
  }

  /**
   * StudentFees findFirstOrThrow
   */
  export type StudentFeesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentFees to fetch.
     */
    where?: StudentFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentFees to fetch.
     */
    orderBy?: StudentFeesOrderByWithRelationInput | StudentFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentFees.
     */
    cursor?: StudentFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentFees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentFees.
     */
    distinct?: StudentFeesScalarFieldEnum | StudentFeesScalarFieldEnum[]
  }

  /**
   * StudentFees findMany
   */
  export type StudentFeesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentFees to fetch.
     */
    where?: StudentFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentFees to fetch.
     */
    orderBy?: StudentFeesOrderByWithRelationInput | StudentFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentFees.
     */
    cursor?: StudentFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentFees.
     */
    skip?: number
    distinct?: StudentFeesScalarFieldEnum | StudentFeesScalarFieldEnum[]
  }

  /**
   * StudentFees create
   */
  export type StudentFeesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentFees.
     */
    data: XOR<StudentFeesCreateInput, StudentFeesUncheckedCreateInput>
  }

  /**
   * StudentFees createMany
   */
  export type StudentFeesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentFees.
     */
    data: StudentFeesCreateManyInput | StudentFeesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentFees createManyAndReturn
   */
  export type StudentFeesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * The data used to create many StudentFees.
     */
    data: StudentFeesCreateManyInput | StudentFeesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentFees update
   */
  export type StudentFeesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentFees.
     */
    data: XOR<StudentFeesUpdateInput, StudentFeesUncheckedUpdateInput>
    /**
     * Choose, which StudentFees to update.
     */
    where: StudentFeesWhereUniqueInput
  }

  /**
   * StudentFees updateMany
   */
  export type StudentFeesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentFees.
     */
    data: XOR<StudentFeesUpdateManyMutationInput, StudentFeesUncheckedUpdateManyInput>
    /**
     * Filter which StudentFees to update
     */
    where?: StudentFeesWhereInput
    /**
     * Limit how many StudentFees to update.
     */
    limit?: number
  }

  /**
   * StudentFees updateManyAndReturn
   */
  export type StudentFeesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * The data used to update StudentFees.
     */
    data: XOR<StudentFeesUpdateManyMutationInput, StudentFeesUncheckedUpdateManyInput>
    /**
     * Filter which StudentFees to update
     */
    where?: StudentFeesWhereInput
    /**
     * Limit how many StudentFees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentFees upsert
   */
  export type StudentFeesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentFees to update in case it exists.
     */
    where: StudentFeesWhereUniqueInput
    /**
     * In case the StudentFees found by the `where` argument doesn't exist, create a new StudentFees with this data.
     */
    create: XOR<StudentFeesCreateInput, StudentFeesUncheckedCreateInput>
    /**
     * In case the StudentFees was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentFeesUpdateInput, StudentFeesUncheckedUpdateInput>
  }

  /**
   * StudentFees delete
   */
  export type StudentFeesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
    /**
     * Filter which StudentFees to delete.
     */
    where: StudentFeesWhereUniqueInput
  }

  /**
   * StudentFees deleteMany
   */
  export type StudentFeesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentFees to delete
     */
    where?: StudentFeesWhereInput
    /**
     * Limit how many StudentFees to delete.
     */
    limit?: number
  }

  /**
   * StudentFees without action
   */
  export type StudentFeesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentFees
     */
    select?: StudentFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentFees
     */
    omit?: StudentFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentFeesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StudentScalarFieldEnum: {
    roll_no: 'roll_no',
    name: 'name',
    gender: 'gender',
    dob: 'dob',
    blood_group: 'blood_group'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const StudentProofScalarFieldEnum: {
    student_proof_id: 'student_proof_id',
    proof_type: 'proof_type',
    proof_link: 'proof_link',
    roll_no: 'roll_no'
  };

  export type StudentProofScalarFieldEnum = (typeof StudentProofScalarFieldEnum)[keyof typeof StudentProofScalarFieldEnum]


  export const StudentFeesScalarFieldEnum: {
    student_fees_id: 'student_fees_id',
    payment_id: 'payment_id',
    payment_mode: 'payment_mode',
    payment_amount: 'payment_amount',
    roll_no: 'roll_no'
  };

  export type StudentFeesScalarFieldEnum = (typeof StudentFeesScalarFieldEnum)[keyof typeof StudentFeesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'ProofType'
   */
  export type EnumProofTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProofType'>
    


  /**
   * Reference to a field of type 'ProofType[]'
   */
  export type ListEnumProofTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProofType[]'>
    


  /**
   * Reference to a field of type 'PaymentType'
   */
  export type EnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType'>
    


  /**
   * Reference to a field of type 'PaymentType[]'
   */
  export type ListEnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    roll_no?: StringFilter<"Student"> | string
    name?: StringFilter<"Student"> | string
    gender?: EnumGenderFilter<"Student"> | $Enums.Gender
    dob?: StringFilter<"Student"> | string
    blood_group?: StringFilter<"Student"> | string
    studentProof?: XOR<StudentProofNullableScalarRelationFilter, StudentProofWhereInput> | null
    studentFees?: StudentFeesListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    roll_no?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    blood_group?: SortOrder
    studentProof?: StudentProofOrderByWithRelationInput
    studentFees?: StudentFeesOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    roll_no?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    name?: StringFilter<"Student"> | string
    gender?: EnumGenderFilter<"Student"> | $Enums.Gender
    dob?: StringFilter<"Student"> | string
    blood_group?: StringFilter<"Student"> | string
    studentProof?: XOR<StudentProofNullableScalarRelationFilter, StudentProofWhereInput> | null
    studentFees?: StudentFeesListRelationFilter
  }, "roll_no">

  export type StudentOrderByWithAggregationInput = {
    roll_no?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    blood_group?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    roll_no?: StringWithAggregatesFilter<"Student"> | string
    name?: StringWithAggregatesFilter<"Student"> | string
    gender?: EnumGenderWithAggregatesFilter<"Student"> | $Enums.Gender
    dob?: StringWithAggregatesFilter<"Student"> | string
    blood_group?: StringWithAggregatesFilter<"Student"> | string
  }

  export type StudentProofWhereInput = {
    AND?: StudentProofWhereInput | StudentProofWhereInput[]
    OR?: StudentProofWhereInput[]
    NOT?: StudentProofWhereInput | StudentProofWhereInput[]
    student_proof_id?: StringFilter<"StudentProof"> | string
    proof_type?: EnumProofTypeFilter<"StudentProof"> | $Enums.ProofType
    proof_link?: StringFilter<"StudentProof"> | string
    roll_no?: StringFilter<"StudentProof"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type StudentProofOrderByWithRelationInput = {
    student_proof_id?: SortOrder
    proof_type?: SortOrder
    proof_link?: SortOrder
    roll_no?: SortOrder
    student?: StudentOrderByWithRelationInput
  }

  export type StudentProofWhereUniqueInput = Prisma.AtLeast<{
    student_proof_id?: string
    roll_no?: string
    AND?: StudentProofWhereInput | StudentProofWhereInput[]
    OR?: StudentProofWhereInput[]
    NOT?: StudentProofWhereInput | StudentProofWhereInput[]
    proof_type?: EnumProofTypeFilter<"StudentProof"> | $Enums.ProofType
    proof_link?: StringFilter<"StudentProof"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "student_proof_id" | "roll_no">

  export type StudentProofOrderByWithAggregationInput = {
    student_proof_id?: SortOrder
    proof_type?: SortOrder
    proof_link?: SortOrder
    roll_no?: SortOrder
    _count?: StudentProofCountOrderByAggregateInput
    _max?: StudentProofMaxOrderByAggregateInput
    _min?: StudentProofMinOrderByAggregateInput
  }

  export type StudentProofScalarWhereWithAggregatesInput = {
    AND?: StudentProofScalarWhereWithAggregatesInput | StudentProofScalarWhereWithAggregatesInput[]
    OR?: StudentProofScalarWhereWithAggregatesInput[]
    NOT?: StudentProofScalarWhereWithAggregatesInput | StudentProofScalarWhereWithAggregatesInput[]
    student_proof_id?: StringWithAggregatesFilter<"StudentProof"> | string
    proof_type?: EnumProofTypeWithAggregatesFilter<"StudentProof"> | $Enums.ProofType
    proof_link?: StringWithAggregatesFilter<"StudentProof"> | string
    roll_no?: StringWithAggregatesFilter<"StudentProof"> | string
  }

  export type StudentFeesWhereInput = {
    AND?: StudentFeesWhereInput | StudentFeesWhereInput[]
    OR?: StudentFeesWhereInput[]
    NOT?: StudentFeesWhereInput | StudentFeesWhereInput[]
    student_fees_id?: StringFilter<"StudentFees"> | string
    payment_id?: StringFilter<"StudentFees"> | string
    payment_mode?: EnumPaymentTypeFilter<"StudentFees"> | $Enums.PaymentType
    payment_amount?: StringFilter<"StudentFees"> | string
    roll_no?: StringFilter<"StudentFees"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type StudentFeesOrderByWithRelationInput = {
    student_fees_id?: SortOrder
    payment_id?: SortOrder
    payment_mode?: SortOrder
    payment_amount?: SortOrder
    roll_no?: SortOrder
    student?: StudentOrderByWithRelationInput
  }

  export type StudentFeesWhereUniqueInput = Prisma.AtLeast<{
    student_fees_id?: string
    AND?: StudentFeesWhereInput | StudentFeesWhereInput[]
    OR?: StudentFeesWhereInput[]
    NOT?: StudentFeesWhereInput | StudentFeesWhereInput[]
    payment_id?: StringFilter<"StudentFees"> | string
    payment_mode?: EnumPaymentTypeFilter<"StudentFees"> | $Enums.PaymentType
    payment_amount?: StringFilter<"StudentFees"> | string
    roll_no?: StringFilter<"StudentFees"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "student_fees_id">

  export type StudentFeesOrderByWithAggregationInput = {
    student_fees_id?: SortOrder
    payment_id?: SortOrder
    payment_mode?: SortOrder
    payment_amount?: SortOrder
    roll_no?: SortOrder
    _count?: StudentFeesCountOrderByAggregateInput
    _max?: StudentFeesMaxOrderByAggregateInput
    _min?: StudentFeesMinOrderByAggregateInput
  }

  export type StudentFeesScalarWhereWithAggregatesInput = {
    AND?: StudentFeesScalarWhereWithAggregatesInput | StudentFeesScalarWhereWithAggregatesInput[]
    OR?: StudentFeesScalarWhereWithAggregatesInput[]
    NOT?: StudentFeesScalarWhereWithAggregatesInput | StudentFeesScalarWhereWithAggregatesInput[]
    student_fees_id?: StringWithAggregatesFilter<"StudentFees"> | string
    payment_id?: StringWithAggregatesFilter<"StudentFees"> | string
    payment_mode?: EnumPaymentTypeWithAggregatesFilter<"StudentFees"> | $Enums.PaymentType
    payment_amount?: StringWithAggregatesFilter<"StudentFees"> | string
    roll_no?: StringWithAggregatesFilter<"StudentFees"> | string
  }

  export type StudentCreateInput = {
    roll_no: string
    name: string
    gender: $Enums.Gender
    dob: string
    blood_group: string
    studentProof?: StudentProofCreateNestedOneWithoutStudentInput
    studentFees?: StudentFeesCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    roll_no: string
    name: string
    gender: $Enums.Gender
    dob: string
    blood_group: string
    studentProof?: StudentProofUncheckedCreateNestedOneWithoutStudentInput
    studentFees?: StudentFeesUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    roll_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    blood_group?: StringFieldUpdateOperationsInput | string
    studentProof?: StudentProofUpdateOneWithoutStudentNestedInput
    studentFees?: StudentFeesUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    roll_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    blood_group?: StringFieldUpdateOperationsInput | string
    studentProof?: StudentProofUncheckedUpdateOneWithoutStudentNestedInput
    studentFees?: StudentFeesUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    roll_no: string
    name: string
    gender: $Enums.Gender
    dob: string
    blood_group: string
  }

  export type StudentUpdateManyMutationInput = {
    roll_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    blood_group?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUncheckedUpdateManyInput = {
    roll_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    blood_group?: StringFieldUpdateOperationsInput | string
  }

  export type StudentProofCreateInput = {
    student_proof_id: string
    proof_type: $Enums.ProofType
    proof_link: string
    student: StudentCreateNestedOneWithoutStudentProofInput
  }

  export type StudentProofUncheckedCreateInput = {
    student_proof_id: string
    proof_type: $Enums.ProofType
    proof_link: string
    roll_no: string
  }

  export type StudentProofUpdateInput = {
    student_proof_id?: StringFieldUpdateOperationsInput | string
    proof_type?: EnumProofTypeFieldUpdateOperationsInput | $Enums.ProofType
    proof_link?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateOneRequiredWithoutStudentProofNestedInput
  }

  export type StudentProofUncheckedUpdateInput = {
    student_proof_id?: StringFieldUpdateOperationsInput | string
    proof_type?: EnumProofTypeFieldUpdateOperationsInput | $Enums.ProofType
    proof_link?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
  }

  export type StudentProofCreateManyInput = {
    student_proof_id: string
    proof_type: $Enums.ProofType
    proof_link: string
    roll_no: string
  }

  export type StudentProofUpdateManyMutationInput = {
    student_proof_id?: StringFieldUpdateOperationsInput | string
    proof_type?: EnumProofTypeFieldUpdateOperationsInput | $Enums.ProofType
    proof_link?: StringFieldUpdateOperationsInput | string
  }

  export type StudentProofUncheckedUpdateManyInput = {
    student_proof_id?: StringFieldUpdateOperationsInput | string
    proof_type?: EnumProofTypeFieldUpdateOperationsInput | $Enums.ProofType
    proof_link?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
  }

  export type StudentFeesCreateInput = {
    student_fees_id: string
    payment_id: string
    payment_mode: $Enums.PaymentType
    payment_amount: string
    student: StudentCreateNestedOneWithoutStudentFeesInput
  }

  export type StudentFeesUncheckedCreateInput = {
    student_fees_id: string
    payment_id: string
    payment_mode: $Enums.PaymentType
    payment_amount: string
    roll_no: string
  }

  export type StudentFeesUpdateInput = {
    student_fees_id?: StringFieldUpdateOperationsInput | string
    payment_id?: StringFieldUpdateOperationsInput | string
    payment_mode?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    payment_amount?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateOneRequiredWithoutStudentFeesNestedInput
  }

  export type StudentFeesUncheckedUpdateInput = {
    student_fees_id?: StringFieldUpdateOperationsInput | string
    payment_id?: StringFieldUpdateOperationsInput | string
    payment_mode?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    payment_amount?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
  }

  export type StudentFeesCreateManyInput = {
    student_fees_id: string
    payment_id: string
    payment_mode: $Enums.PaymentType
    payment_amount: string
    roll_no: string
  }

  export type StudentFeesUpdateManyMutationInput = {
    student_fees_id?: StringFieldUpdateOperationsInput | string
    payment_id?: StringFieldUpdateOperationsInput | string
    payment_mode?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    payment_amount?: StringFieldUpdateOperationsInput | string
  }

  export type StudentFeesUncheckedUpdateManyInput = {
    student_fees_id?: StringFieldUpdateOperationsInput | string
    payment_id?: StringFieldUpdateOperationsInput | string
    payment_mode?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    payment_amount?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type StudentProofNullableScalarRelationFilter = {
    is?: StudentProofWhereInput | null
    isNot?: StudentProofWhereInput | null
  }

  export type StudentFeesListRelationFilter = {
    every?: StudentFeesWhereInput
    some?: StudentFeesWhereInput
    none?: StudentFeesWhereInput
  }

  export type StudentFeesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    roll_no?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    blood_group?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    roll_no?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    blood_group?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    roll_no?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    blood_group?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type EnumProofTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProofType | EnumProofTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProofType[] | ListEnumProofTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProofType[] | ListEnumProofTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProofTypeFilter<$PrismaModel> | $Enums.ProofType
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type StudentProofCountOrderByAggregateInput = {
    student_proof_id?: SortOrder
    proof_type?: SortOrder
    proof_link?: SortOrder
    roll_no?: SortOrder
  }

  export type StudentProofMaxOrderByAggregateInput = {
    student_proof_id?: SortOrder
    proof_type?: SortOrder
    proof_link?: SortOrder
    roll_no?: SortOrder
  }

  export type StudentProofMinOrderByAggregateInput = {
    student_proof_id?: SortOrder
    proof_type?: SortOrder
    proof_link?: SortOrder
    roll_no?: SortOrder
  }

  export type EnumProofTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProofType | EnumProofTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProofType[] | ListEnumProofTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProofType[] | ListEnumProofTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProofTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProofType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProofTypeFilter<$PrismaModel>
    _max?: NestedEnumProofTypeFilter<$PrismaModel>
  }

  export type EnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type StudentFeesCountOrderByAggregateInput = {
    student_fees_id?: SortOrder
    payment_id?: SortOrder
    payment_mode?: SortOrder
    payment_amount?: SortOrder
    roll_no?: SortOrder
  }

  export type StudentFeesMaxOrderByAggregateInput = {
    student_fees_id?: SortOrder
    payment_id?: SortOrder
    payment_mode?: SortOrder
    payment_amount?: SortOrder
    roll_no?: SortOrder
  }

  export type StudentFeesMinOrderByAggregateInput = {
    student_fees_id?: SortOrder
    payment_id?: SortOrder
    payment_mode?: SortOrder
    payment_amount?: SortOrder
    roll_no?: SortOrder
  }

  export type EnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type StudentProofCreateNestedOneWithoutStudentInput = {
    create?: XOR<StudentProofCreateWithoutStudentInput, StudentProofUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentProofCreateOrConnectWithoutStudentInput
    connect?: StudentProofWhereUniqueInput
  }

  export type StudentFeesCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentFeesCreateWithoutStudentInput, StudentFeesUncheckedCreateWithoutStudentInput> | StudentFeesCreateWithoutStudentInput[] | StudentFeesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentFeesCreateOrConnectWithoutStudentInput | StudentFeesCreateOrConnectWithoutStudentInput[]
    createMany?: StudentFeesCreateManyStudentInputEnvelope
    connect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
  }

  export type StudentProofUncheckedCreateNestedOneWithoutStudentInput = {
    create?: XOR<StudentProofCreateWithoutStudentInput, StudentProofUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentProofCreateOrConnectWithoutStudentInput
    connect?: StudentProofWhereUniqueInput
  }

  export type StudentFeesUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentFeesCreateWithoutStudentInput, StudentFeesUncheckedCreateWithoutStudentInput> | StudentFeesCreateWithoutStudentInput[] | StudentFeesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentFeesCreateOrConnectWithoutStudentInput | StudentFeesCreateOrConnectWithoutStudentInput[]
    createMany?: StudentFeesCreateManyStudentInputEnvelope
    connect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type StudentProofUpdateOneWithoutStudentNestedInput = {
    create?: XOR<StudentProofCreateWithoutStudentInput, StudentProofUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentProofCreateOrConnectWithoutStudentInput
    upsert?: StudentProofUpsertWithoutStudentInput
    disconnect?: StudentProofWhereInput | boolean
    delete?: StudentProofWhereInput | boolean
    connect?: StudentProofWhereUniqueInput
    update?: XOR<XOR<StudentProofUpdateToOneWithWhereWithoutStudentInput, StudentProofUpdateWithoutStudentInput>, StudentProofUncheckedUpdateWithoutStudentInput>
  }

  export type StudentFeesUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentFeesCreateWithoutStudentInput, StudentFeesUncheckedCreateWithoutStudentInput> | StudentFeesCreateWithoutStudentInput[] | StudentFeesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentFeesCreateOrConnectWithoutStudentInput | StudentFeesCreateOrConnectWithoutStudentInput[]
    upsert?: StudentFeesUpsertWithWhereUniqueWithoutStudentInput | StudentFeesUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentFeesCreateManyStudentInputEnvelope
    set?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    disconnect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    delete?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    connect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    update?: StudentFeesUpdateWithWhereUniqueWithoutStudentInput | StudentFeesUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentFeesUpdateManyWithWhereWithoutStudentInput | StudentFeesUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentFeesScalarWhereInput | StudentFeesScalarWhereInput[]
  }

  export type StudentProofUncheckedUpdateOneWithoutStudentNestedInput = {
    create?: XOR<StudentProofCreateWithoutStudentInput, StudentProofUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentProofCreateOrConnectWithoutStudentInput
    upsert?: StudentProofUpsertWithoutStudentInput
    disconnect?: StudentProofWhereInput | boolean
    delete?: StudentProofWhereInput | boolean
    connect?: StudentProofWhereUniqueInput
    update?: XOR<XOR<StudentProofUpdateToOneWithWhereWithoutStudentInput, StudentProofUpdateWithoutStudentInput>, StudentProofUncheckedUpdateWithoutStudentInput>
  }

  export type StudentFeesUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentFeesCreateWithoutStudentInput, StudentFeesUncheckedCreateWithoutStudentInput> | StudentFeesCreateWithoutStudentInput[] | StudentFeesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentFeesCreateOrConnectWithoutStudentInput | StudentFeesCreateOrConnectWithoutStudentInput[]
    upsert?: StudentFeesUpsertWithWhereUniqueWithoutStudentInput | StudentFeesUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentFeesCreateManyStudentInputEnvelope
    set?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    disconnect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    delete?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    connect?: StudentFeesWhereUniqueInput | StudentFeesWhereUniqueInput[]
    update?: StudentFeesUpdateWithWhereUniqueWithoutStudentInput | StudentFeesUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentFeesUpdateManyWithWhereWithoutStudentInput | StudentFeesUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentFeesScalarWhereInput | StudentFeesScalarWhereInput[]
  }

  export type StudentCreateNestedOneWithoutStudentProofInput = {
    create?: XOR<StudentCreateWithoutStudentProofInput, StudentUncheckedCreateWithoutStudentProofInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentProofInput
    connect?: StudentWhereUniqueInput
  }

  export type EnumProofTypeFieldUpdateOperationsInput = {
    set?: $Enums.ProofType
  }

  export type StudentUpdateOneRequiredWithoutStudentProofNestedInput = {
    create?: XOR<StudentCreateWithoutStudentProofInput, StudentUncheckedCreateWithoutStudentProofInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentProofInput
    upsert?: StudentUpsertWithoutStudentProofInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutStudentProofInput, StudentUpdateWithoutStudentProofInput>, StudentUncheckedUpdateWithoutStudentProofInput>
  }

  export type StudentCreateNestedOneWithoutStudentFeesInput = {
    create?: XOR<StudentCreateWithoutStudentFeesInput, StudentUncheckedCreateWithoutStudentFeesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentFeesInput
    connect?: StudentWhereUniqueInput
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentType
  }

  export type StudentUpdateOneRequiredWithoutStudentFeesNestedInput = {
    create?: XOR<StudentCreateWithoutStudentFeesInput, StudentUncheckedCreateWithoutStudentFeesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudentFeesInput
    upsert?: StudentUpsertWithoutStudentFeesInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutStudentFeesInput, StudentUpdateWithoutStudentFeesInput>, StudentUncheckedUpdateWithoutStudentFeesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedEnumProofTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProofType | EnumProofTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProofType[] | ListEnumProofTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProofType[] | ListEnumProofTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProofTypeFilter<$PrismaModel> | $Enums.ProofType
  }

  export type NestedEnumProofTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProofType | EnumProofTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProofType[] | ListEnumProofTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProofType[] | ListEnumProofTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProofTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProofType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProofTypeFilter<$PrismaModel>
    _max?: NestedEnumProofTypeFilter<$PrismaModel>
  }

  export type NestedEnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type StudentProofCreateWithoutStudentInput = {
    student_proof_id: string
    proof_type: $Enums.ProofType
    proof_link: string
  }

  export type StudentProofUncheckedCreateWithoutStudentInput = {
    student_proof_id: string
    proof_type: $Enums.ProofType
    proof_link: string
  }

  export type StudentProofCreateOrConnectWithoutStudentInput = {
    where: StudentProofWhereUniqueInput
    create: XOR<StudentProofCreateWithoutStudentInput, StudentProofUncheckedCreateWithoutStudentInput>
  }

  export type StudentFeesCreateWithoutStudentInput = {
    student_fees_id: string
    payment_id: string
    payment_mode: $Enums.PaymentType
    payment_amount: string
  }

  export type StudentFeesUncheckedCreateWithoutStudentInput = {
    student_fees_id: string
    payment_id: string
    payment_mode: $Enums.PaymentType
    payment_amount: string
  }

  export type StudentFeesCreateOrConnectWithoutStudentInput = {
    where: StudentFeesWhereUniqueInput
    create: XOR<StudentFeesCreateWithoutStudentInput, StudentFeesUncheckedCreateWithoutStudentInput>
  }

  export type StudentFeesCreateManyStudentInputEnvelope = {
    data: StudentFeesCreateManyStudentInput | StudentFeesCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentProofUpsertWithoutStudentInput = {
    update: XOR<StudentProofUpdateWithoutStudentInput, StudentProofUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentProofCreateWithoutStudentInput, StudentProofUncheckedCreateWithoutStudentInput>
    where?: StudentProofWhereInput
  }

  export type StudentProofUpdateToOneWithWhereWithoutStudentInput = {
    where?: StudentProofWhereInput
    data: XOR<StudentProofUpdateWithoutStudentInput, StudentProofUncheckedUpdateWithoutStudentInput>
  }

  export type StudentProofUpdateWithoutStudentInput = {
    student_proof_id?: StringFieldUpdateOperationsInput | string
    proof_type?: EnumProofTypeFieldUpdateOperationsInput | $Enums.ProofType
    proof_link?: StringFieldUpdateOperationsInput | string
  }

  export type StudentProofUncheckedUpdateWithoutStudentInput = {
    student_proof_id?: StringFieldUpdateOperationsInput | string
    proof_type?: EnumProofTypeFieldUpdateOperationsInput | $Enums.ProofType
    proof_link?: StringFieldUpdateOperationsInput | string
  }

  export type StudentFeesUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentFeesWhereUniqueInput
    update: XOR<StudentFeesUpdateWithoutStudentInput, StudentFeesUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentFeesCreateWithoutStudentInput, StudentFeesUncheckedCreateWithoutStudentInput>
  }

  export type StudentFeesUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentFeesWhereUniqueInput
    data: XOR<StudentFeesUpdateWithoutStudentInput, StudentFeesUncheckedUpdateWithoutStudentInput>
  }

  export type StudentFeesUpdateManyWithWhereWithoutStudentInput = {
    where: StudentFeesScalarWhereInput
    data: XOR<StudentFeesUpdateManyMutationInput, StudentFeesUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentFeesScalarWhereInput = {
    AND?: StudentFeesScalarWhereInput | StudentFeesScalarWhereInput[]
    OR?: StudentFeesScalarWhereInput[]
    NOT?: StudentFeesScalarWhereInput | StudentFeesScalarWhereInput[]
    student_fees_id?: StringFilter<"StudentFees"> | string
    payment_id?: StringFilter<"StudentFees"> | string
    payment_mode?: EnumPaymentTypeFilter<"StudentFees"> | $Enums.PaymentType
    payment_amount?: StringFilter<"StudentFees"> | string
    roll_no?: StringFilter<"StudentFees"> | string
  }

  export type StudentCreateWithoutStudentProofInput = {
    roll_no: string
    name: string
    gender: $Enums.Gender
    dob: string
    blood_group: string
    studentFees?: StudentFeesCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudentProofInput = {
    roll_no: string
    name: string
    gender: $Enums.Gender
    dob: string
    blood_group: string
    studentFees?: StudentFeesUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutStudentProofInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudentProofInput, StudentUncheckedCreateWithoutStudentProofInput>
  }

  export type StudentUpsertWithoutStudentProofInput = {
    update: XOR<StudentUpdateWithoutStudentProofInput, StudentUncheckedUpdateWithoutStudentProofInput>
    create: XOR<StudentCreateWithoutStudentProofInput, StudentUncheckedCreateWithoutStudentProofInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutStudentProofInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutStudentProofInput, StudentUncheckedUpdateWithoutStudentProofInput>
  }

  export type StudentUpdateWithoutStudentProofInput = {
    roll_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    blood_group?: StringFieldUpdateOperationsInput | string
    studentFees?: StudentFeesUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudentProofInput = {
    roll_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    blood_group?: StringFieldUpdateOperationsInput | string
    studentFees?: StudentFeesUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateWithoutStudentFeesInput = {
    roll_no: string
    name: string
    gender: $Enums.Gender
    dob: string
    blood_group: string
    studentProof?: StudentProofCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudentFeesInput = {
    roll_no: string
    name: string
    gender: $Enums.Gender
    dob: string
    blood_group: string
    studentProof?: StudentProofUncheckedCreateNestedOneWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutStudentFeesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudentFeesInput, StudentUncheckedCreateWithoutStudentFeesInput>
  }

  export type StudentUpsertWithoutStudentFeesInput = {
    update: XOR<StudentUpdateWithoutStudentFeesInput, StudentUncheckedUpdateWithoutStudentFeesInput>
    create: XOR<StudentCreateWithoutStudentFeesInput, StudentUncheckedCreateWithoutStudentFeesInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutStudentFeesInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutStudentFeesInput, StudentUncheckedUpdateWithoutStudentFeesInput>
  }

  export type StudentUpdateWithoutStudentFeesInput = {
    roll_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    blood_group?: StringFieldUpdateOperationsInput | string
    studentProof?: StudentProofUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudentFeesInput = {
    roll_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    blood_group?: StringFieldUpdateOperationsInput | string
    studentProof?: StudentProofUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type StudentFeesCreateManyStudentInput = {
    student_fees_id: string
    payment_id: string
    payment_mode: $Enums.PaymentType
    payment_amount: string
  }

  export type StudentFeesUpdateWithoutStudentInput = {
    student_fees_id?: StringFieldUpdateOperationsInput | string
    payment_id?: StringFieldUpdateOperationsInput | string
    payment_mode?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    payment_amount?: StringFieldUpdateOperationsInput | string
  }

  export type StudentFeesUncheckedUpdateWithoutStudentInput = {
    student_fees_id?: StringFieldUpdateOperationsInput | string
    payment_id?: StringFieldUpdateOperationsInput | string
    payment_mode?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    payment_amount?: StringFieldUpdateOperationsInput | string
  }

  export type StudentFeesUncheckedUpdateManyWithoutStudentInput = {
    student_fees_id?: StringFieldUpdateOperationsInput | string
    payment_id?: StringFieldUpdateOperationsInput | string
    payment_mode?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    payment_amount?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}